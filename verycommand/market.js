const { Client, Message, MessageEmbed} = require("discord.js");
const richard = require("../database/richardGet");
const richardDatabase = require("../database/richardDatabase");
const table = require("table");
const coinIsmi = coinsistem.coinIsmi
module.exports.execute = (client, message, args) => {
    if(!coinsistem.sistem) return; 
    let embed2 = new MessageEmbed().setAuthor(ayarlar.embed.ba≈ülƒ±k, message.guild.iconURL({dynamic: true})).setColor(ayarlar.embed.renk)
    let embed = new MessageEmbed().setAuthor(ayarlar.embed.ba≈ülƒ±k, message.guild.iconURL({dynamic: true})).setColor(ayarlar.embed.renk)
    let kullanici = message.author;
    let uye = message.guild.member(kullanici);
/*    if(!uye.roles.cache.has(roller.Teyit.tagRol√º) && !uye.hasPermission('ADMINISTRATOR') && !uye.user.username.includes(ayarlar.tag) && !message.member.hasPermission('ADMINISTRATOR')) return message.channel.wsend(`Hata: ƒ∞sminiz de \`${ayarlar.tag}\` sembol√º bulunmadƒ±ƒüƒ±ndan coin i≈ülemi yapamazsƒ±nƒ±z!`).then(x => x.delete({timeout: 5000}));
  */  let puansorgu = richardDatabase.coinOku(uye)
    let urundata = coinsistem.√úr√ºnler
    var filter = msj => msj.author.id === message.author.id && msj.author.id !== client.user.id;
    let urunler = [["ID", "√úr√ºn ƒ∞smi", "√úr√ºn Detayƒ±" ,"√úr√ºn Fiyatƒ±"]];
  urunler = urunler.concat(urundata.map(value => { 
         let urunfiyatioku = `${value.urunFiyati} üíµ`	
           return [
          `#${value.Id}`,
          `${value.urunAdi}`,
          `${value.urunDetayi}`,
          `${urunfiyatioku}`,
        ]
    }))
    let √ºr√ºnler = message.channel.wsend(new MessageEmbed()/*.setDescription(`${uye} √úyesinin Maƒüazasƒ±!.\n\n **Maƒüazamƒ±za ho≈ügeldiniz!** A≈üaƒüƒ±dan paranƒ±zƒ±n yettiƒüi √∂ƒüeyi satƒ±n alabilirsiniz!\n\n Toplam Paranƒ±z: **${puansorgu}**\n\n Paranƒ±zƒ±n yettikleri,  \`‚úîÔ∏è\`  Paranƒ±zƒ±n Yetmedikleri,  \`‚úñÔ∏è\`  ile belirtilmi≈ütir. \n\n\`\`\`css
${shopList.join("\n\n")}\`\`\``).setFooter(`Almak istediƒüiniz √ºr√ºn√º `+ sistem.prefix +`al ID ≈üeklinde satƒ±n alabilirsiniz.`).setColor(ayarlar.embed.renk).setAuthor(ayarlar.embed.ba≈ülƒ±k, message.guild.iconURL({dynamic: true, size: 2048}))*/
.setColor(ayarlar.embed.renk).setAuthor(ayarlar.embed.ba≈ülƒ±k, message.guild.iconURL({dynamic: true, size: 2048})).setDescription(`\n.`).addField(`üõí ${coinIsmi} Market listesi a≈ü≈üaƒüƒ±da listelendiƒüi gibidir;`,`\`\`\`css
${table.table(urunler, {
          border: table.getBorderCharacters(`void`),
          columnDefault: {
            paddingLeft: 0,
            paddingRight: 1,

        },
        columns: {
          0: {
              paddingLeft: 1
          },
          1: {
              paddingLeft: 1,
              alignment: "center"
          },
          2: {
              paddingLeft: 1,
              alignment: "center"
          },
          3: {
              paddingLeft: 1,
              alignment: "center"
          },
          4: {
              paddingLeft: 1,
              alignment: "center"
          },
      },
        drawHorizontalLine: (index, size) => {
          return index === 0 || index === 1 || index === size;
      }
      })}\`\`\``).setFooter(sistem.footer)).then(async msg => {
    let collector = msg.createReactionCollector((reaction, user) => user.id === message.author.id);
    collector.on("collect", async(reaction, user) => {
  
      if (reaction.emoji.id == emojiler.market) {let satinal = message.channel.wsend(`${message.guild.emojiG√∂ster(emojiler.market)} Merhaba, satƒ±n almak istediƒüin √ºr√ºn√ºn \`#ID\` numarasƒ±nƒ± girermisiniz?`)
          message.channel.awaitMessages(filter, {max: 1, time: 10000}).then(async richard => {
        let √ºr√ºnid = richard.first().content
        let alƒ±ncak√ºr√ºn = coinsistem.√úr√ºnler[coinsistem.√úr√ºnler.indexOf(coinsistem.√úr√ºnler.find(x => x.Id == √ºr√ºnid))]
        if(alƒ±ncak√ºr√ºn) {
        let satƒ±nalma = await message.channel.wsend(`${message.guild.emojiG√∂ster(emojiler.market)} **#${alƒ±ncak√ºr√ºn.Id}** numaralƒ± \`${alƒ±ncak√ºr√ºn.urunAdi}\` isimli √ºr√ºn√º \`${alƒ±ncak√ºr√ºn.urunFiyati} üíµ\` fiyatƒ±na satƒ±n almak istiyormusun? (__Evet__/__Hayƒ±r__)`)
        message.channel.awaitMessages(filter, { errors: ["time"], max: 1, time: 10000})
        .then(async richardsatinal => {
            if(richardsatinal.first().content.toLowerCase() === "hayƒ±r" || richardsatinal.first().content.toLowerCase() === "Hayƒ±r" || richardsatinal.first().content.toLowerCase() === "h" || richardsatinal.first().content.toLowerCase() === "H") {
            √ºr√ºnler.reactions.removeAll();
            message.channel.wsend(`${message.guild.emojiG√∂ster(emojiler.hata)} \`${alƒ±ncak√ºr√ºn.urunAdi}\` isimli √ºr√ºn√º satƒ±n almaktan vazge√ßtin.`).then(x => {x.delete({timeout: 7500})});
            satƒ±nalma.delete()
            };
            if(richardsatinal.first().content.toLowerCase() === "evet" || richardsatinal.first().content.toLowerCase() === "Evet" || richardsatinal.first().content.toLowerCase() === "E" || richardsatinal.first().content.toLowerCase() === "e") {
                if(puansorgu >= alƒ±ncak√ºr√ºn.urunFiyati) {
                    if(alƒ±ncak√ºr√ºn.urunRolMu == '1') {
                        if(uye.roles.cache.has(alƒ±ncak√ºr√ºn.urunRolId)) return message.channel.wsend(`${message.guild.emojiG√∂ster(emojiler.market)} \`${alƒ±ncak√ºr√ºn.urunAdi}\` isimli √ºr√ºn√º √∂nceden satƒ±n almƒ±≈üsƒ±n!`).then(x => {
                          √ºr√ºnler.reactions.removeAll();
                          x.delete({timeout: 7500})
                          satƒ±nalma.delete()
                        });
/*                        if(alƒ±ncak√ºr√ºn.urunYetkimi == '1') {
                        if(!roller.kurucuRolleri.some(oku => message.member.roles.cache.has(oku)) && !roller.altY√∂netimRolleri.some(oku => message.member.roles.cache.has(oku)) && !roller.Yetkiler.some(oku => message.member.roles.cache.has(oku)) && !roller.y√∂netimRolleri.some(oku => message.member.roles.cache.has(oku)) && !message.member.hasPermission('ADMINISTRATOR')) return message.channel.wsend(`Hata: \`${alƒ±ncak√ºr√ºn.urunAdi}\` isimli √ºr√ºn√º sadece yetkililer satƒ±n alabilir!`).then(x => {
                          √ºr√ºnler.reactions.removeAll();
                          x.delete({timeout: 7500}) 
                          satƒ±nalma.delete()
                        });
                        } else {
                            uye.roles.add(alƒ±ncak√ºr√ºn.urunRolId)
                        }*/
                            uye.roles.add(alƒ±ncak√ºr√ºn.urunRolId)
                        message.channel.wsend(`${message.guild.emojiG√∂ster(emojiler.onay)} **${alƒ±ncak√ºr√ºn.urunAdi}** isimli √ºr√ºn size bir hediye g√∂nderdi, l√ºtfen rollerinizi kontrol edin.`).then(x => x.delete({timeout: 7500}))
                    };
                    richardDatabase.coinSil(uye, alƒ±ncak√ºr√ºn.urunFiyati)
                    msg.reactions.removeAll();
                    satƒ±nalma.delete();
                    message.channel.wsend(embed.addField(`Ba≈üarƒ±lƒ±!`,`\`${alƒ±ncak√ºr√ºn.urunAdi}\` isimli √ºr√ºn√º ba≈üarƒ±yla satƒ±n aldƒ±n!`).addField(`√úr√ºn Bilgisi`,`\`#satƒ±n-alma-log\` isimli kanala bilgi ge√ßildi.\n√úr√ºn teslimi i√ßin y√∂neticisi olan ki≈üilere ba≈üvurun.`).addField('√úr√ºn ve hesap bakiyesi', `\`√úr√ºn Fiyatƒ±: ${alƒ±ncak√ºr√ºn.urunFiyati} üíµ\``, true).addField(`·≤º`,`\`G√ºncel Bakiye: ${puansorgu - alƒ±ncak√ºr√ºn.urunFiyati} üíµ\``, true)).then(x => x.delete({timeout: 15000}));
                    message.guild.kanalBul("satƒ±n-alma-log").wsend(embed2.setDescription(`${uye} isimli √ºye **${tarihsel(Date.now())}** tarihinde **${alƒ±ncak√ºr√ºn.urunAdi}** isimli √ºr√ºn√º \`${alƒ±ncak√ºr√ºn.urunFiyati} üíµ\` fiyatƒ±na satƒ±n aldƒ±.`))
                } else {
                    msg.reactions.removeAll();
                    message.channel.wsend(`\`Yeterli ${coinsistem.coinIsmi} bulunamadƒ±.\``).then(x => x.delete({timeout: 7500}));
                }
            }
          })
        } else {
          √ºr√ºnler = await √ºr√ºnler.reactions.removeAll();
          satinal.delete();
          √ºr√ºnler.delete({timeout: 5000});
          return;
        }
        })
}});
        
      }) 
      };
module.exports.configuration = {
    name: "market",
    aliases: ["marketim"],
    usage: "LVBEL ANA SKM",
    description: "LVBEL ANNENƒ∞ HRRR"
};

